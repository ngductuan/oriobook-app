server:
  host: ${HOST:localhost}
  port: ${PORT:8080}
  address: ${ADDRESS:0.0.0.0}
spring:
  config:
    import: optional:file:.env[.properties]
  profiles:
    active: ${SPRING_ENV:dev}
  application:
    name: oriobook
#  client-url:
#    web: ${WEB_CLIENT_URL}
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${MYSQL_ROOT_USERNAME}
    password: ${MYSQL_ROOT_PASSWORD}

    hikari:
      minimum-idle: 5
      maximum-pool-size: 20
      idle-timeout: 30000
      max-lifetime: 1800000
      connection-timeout: 20000
      pool-name: MyHikariCP
  jpa:
    open-in-view: false
    show-sql: false
    hibernate:
      ddl-auto: none #chỗ này mà sửa thành drop-create thì rất nguy
      #ddl-auto: validate
      #Hibernate sẽ không tạo, sửa đổi hoặc xóa bất kỳ bảng, cột hay ràng buộc nào trong cơ sở dữ liệu
      #validate thường được sử dụng trong môi trường production
      #Nếu có sự khác biệt giữa cấu trúc cơ sở dữ liệu và các entity class
      #lỗi sẽ được hiển thị và yêu cầu sửa đổi cấu trúc cơ sở dữ liệu một cách thủ công
    properties:
      hibernate:
        boot:
          allow_jdbc_metadata_access: false
        dialect: org.hibernate.dialect.MySQL8Dialect #driver
      format_sql: true
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 10MB
#  jackson: # redundant
#    date-format: yyyy-MM-dd'T'HH:mm:ss'Z'
#    time-zone: UTC
#    serialization:
#      write-dates-as-timestamps: false
  data:
    redis:
      repositories:
        enabled: true
      use-redis-cache: false
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
  #  timeout: 3000
  #  max-active: 8
  #  max-idle: 8
  #  min-idle: 0
  #  max-wait: -1
  #  test-on-borrow: true

    #### outdated
    elasticsearch:
      cluster-names: elasticsearch
      cluster-nodes: ${ELASTICSEARCH_HOST}
      repositories:
        enabled: true
      auto-index-creation: true
  ### newest
  elasticsearch:
    rest:
      uris: ${ELASTICSEARCH_HOST}
  cache:
    type: redis
  kafka:
    bootstrap-servers: ${KAFKA_HOST:localhost}:9092
    producer:
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        "[spring.json.type.mapping]": product:com.project.oriobook.modules.product.entities.Product
    consumer:
      value-deserializer: org.apache.kafka.common.serialization.ByteArrayDeserializer

#logging
logging:
  file: /logs/application.log

# Prefix for API
api:
  prefix: /v1/api

# Swagger open api
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tagsSorter: alpha
  api-docs:
    path: /api-docs
  show-actuator: true
  writer-with-order-by-keys: true

# JWT
jwt:
  access-token-time: ${ACCESS_TOKEN_TIME}
  refresh-token-time: ${REFRESH_TOKEN_TIME}
  secret-key: ${SECRET_KEY}

# Cloudinary
cloudinary:
  cloud-name: ${CLOUDINARY_CLOUD_NAME}
  api-key: ${CLOUDINARY_API_KEY}
  api-secret: ${CLOUDINARY_API_SECRET}

